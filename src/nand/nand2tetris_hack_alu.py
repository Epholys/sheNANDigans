from nand.circuit import Circuit
from nand.circuit_builder import CircuitBuilder


class HackALUBuilder(CircuitBuilder):
    def __init__(self):
        super().__init__()

    def build_circuits(self):
        super().build_circuits()
        self.add_not()
        self.add_and()
        self.add_or()
        self.add_xor()
        self.add_mux()
        self.add_dmux()
        self.add_not16()
        self.add_and16()
        self.add_or16()
        self.add_mux16()
        self.add_or8way()
        self.add_mux8way16()

    def add_not(self):
        not_gate = Circuit("NOT")
        not_gate.add_component("NAND", self.library.get_circuit(0))
        not_gate.connect_input("IN", "NAND", "A")
        not_gate.connect_input("IN", "NAND", "B")
        not_gate.connect_output("OUT", "NAND", "OUT")
        self.library.add_circuit(not_gate)

    def add_and(self):
        and_gate = Circuit("AND")
        and_gate.add_component("NAND", self.library.get_circuit(0))
        and_gate.add_component("NOT", self.library.get_circuit("NOT"))
        and_gate.connect_input("A", "NAND", "A")
        and_gate.connect_input("B", "NAND", "B")
        and_gate.connect_output("OUT", "NOT", "OUT")
        and_gate.connect("NAND", "OUT", "NOT", "IN")
        self.library.add_circuit(and_gate)

    def add_or(self):
        or_gate = Circuit("OR")

        or_gate.add_component("NOT_A", self.library.get_circuit("NOT"))
        or_gate.add_component("NOT_B", self.library.get_circuit("NOT"))
        or_gate.add_component("AND", self.library.get_circuit("AND"))
        or_gate.add_component("NOT_OUT", self.library.get_circuit("NOT"))

        or_gate.connect_input("A", "NOT_A", "IN")
        or_gate.connect_input("B", "NOT_B", "IN")

        or_gate.connect_output("OUT", "NOT_OUT", "OUT")

        or_gate.connect("NOT_A", "OUT", "AND", "A")
        or_gate.connect("NOT_B", "OUT", "AND", "B")
        or_gate.connect("AND", "OUT", "NOT_OUT", "IN")

        self.library.add_circuit(or_gate)

    def add_xor(self):
        xor_gate = Circuit("XOR")

        xor_gate.add_component("NOT_A", self.library.get_circuit("NOT"))
        xor_gate.add_component("NOT_B", self.library.get_circuit("NOT"))
        xor_gate.add_component("AND_A", self.library.get_circuit("AND"))
        xor_gate.add_component("AND_B", self.library.get_circuit("AND"))
        xor_gate.add_component("OR", self.library.get_circuit("OR"))

        xor_gate.connect_input("A", "NOT_A", "IN")
        xor_gate.connect_input("B", "NOT_B", "IN")
        xor_gate.connect_input("A", "AND_A", "A")
        xor_gate.connect_input("B", "AND_B", "A")

        xor_gate.connect_output("OUT", "OR", "OUT")

        xor_gate.connect("NOT_A", "OUT", "AND_B", "B")
        xor_gate.connect("NOT_B", "OUT", "AND_A", "B")
        xor_gate.connect("AND_A", "OUT", "OR", "A")
        xor_gate.connect("AND_B", "OUT", "OR", "B")

        self.library.add_circuit(xor_gate)

    def add_mux(self):
        mux = Circuit("Mux")

        mux.add_component("SEL_NOT", self.library.get_circuit("NOT"))
        mux.add_component("OR_A", self.library.get_circuit("OR"))
        mux.add_component("OR_B", self.library.get_circuit("OR"))
        mux.add_component("AND", self.library.get_circuit("AND"))

        mux.connect_input("SEL", "SEL_NOT", "IN")
        mux.connect_input("A", "OR_A", "A")
        mux.connect_input("SEL", "OR_A", "B")
        mux.connect_input("B", "OR_B", "A")

        mux.connect_output("OUT", "AND", "OUT")

        mux.connect("SEL_NOT", "OUT", "OR_B", "B")
        mux.connect("OR_A", "OUT", "AND", "A")
        mux.connect("OR_B", "OUT", "AND", "B")

        self.library.add_circuit(mux)

    def add_dmux(self):
        dmux = Circuit("DMux")

        dmux.add_component("NOT", self.library.get_circuit("NOT"))
        dmux.add_component("AND_A", self.library.get_circuit("AND"))
        dmux.add_component("AND_B", self.library.get_circuit("AND"))

        dmux.connect_input("IN", "AND_A", "A")
        dmux.connect_input("SEL", "NOT", "IN")
        dmux.connect_input("IN", "AND_B", "A")
        dmux.connect_input("SEL", "AND_B", "B")

        dmux.connect_output("A", "AND_A", "OUT")
        dmux.connect_output("B", "AND_B", "OUT")

        dmux.connect("NOT", "OUT", "AND_A", "B")

        self.library.add_circuit(dmux)

    def add_not16(self):
        not16 = Circuit("NOT16")

        not16.add_component("NOT_01", self.library.get_circuit("NOT"))
        not16.add_component("NOT_02", self.library.get_circuit("NOT"))
        not16.add_component("NOT_03", self.library.get_circuit("NOT"))
        not16.add_component("NOT_04", self.library.get_circuit("NOT"))
        not16.add_component("NOT_05", self.library.get_circuit("NOT"))
        not16.add_component("NOT_06", self.library.get_circuit("NOT"))
        not16.add_component("NOT_07", self.library.get_circuit("NOT"))
        not16.add_component("NOT_08", self.library.get_circuit("NOT"))
        not16.add_component("NOT_09", self.library.get_circuit("NOT"))
        not16.add_component("NOT_10", self.library.get_circuit("NOT"))
        not16.add_component("NOT_11", self.library.get_circuit("NOT"))
        not16.add_component("NOT_12", self.library.get_circuit("NOT"))
        not16.add_component("NOT_13", self.library.get_circuit("NOT"))
        not16.add_component("NOT_14", self.library.get_circuit("NOT"))
        not16.add_component("NOT_15", self.library.get_circuit("NOT"))
        not16.add_component("NOT_16", self.library.get_circuit("NOT"))

        not16.connect_input("IN_01", "NOT_01", "IN")
        not16.connect_input("IN_02", "NOT_02", "IN")
        not16.connect_input("IN_03", "NOT_03", "IN")
        not16.connect_input("IN_04", "NOT_04", "IN")
        not16.connect_input("IN_05", "NOT_05", "IN")
        not16.connect_input("IN_06", "NOT_06", "IN")
        not16.connect_input("IN_07", "NOT_07", "IN")
        not16.connect_input("IN_08", "NOT_08", "IN")
        not16.connect_input("IN_09", "NOT_09", "IN")
        not16.connect_input("IN_10", "NOT_10", "IN")
        not16.connect_input("IN_11", "NOT_11", "IN")
        not16.connect_input("IN_12", "NOT_12", "IN")
        not16.connect_input("IN_13", "NOT_13", "IN")
        not16.connect_input("IN_14", "NOT_14", "IN")
        not16.connect_input("IN_15", "NOT_15", "IN")
        not16.connect_input("IN_16", "NOT_16", "IN")

        not16.connect_output("OUT_01", "NOT_01", "OUT")
        not16.connect_output("OUT_02", "NOT_02", "OUT")
        not16.connect_output("OUT_03", "NOT_03", "OUT")
        not16.connect_output("OUT_04", "NOT_04", "OUT")
        not16.connect_output("OUT_05", "NOT_05", "OUT")
        not16.connect_output("OUT_06", "NOT_06", "OUT")
        not16.connect_output("OUT_07", "NOT_07", "OUT")
        not16.connect_output("OUT_08", "NOT_08", "OUT")
        not16.connect_output("OUT_09", "NOT_09", "OUT")
        not16.connect_output("OUT_10", "NOT_10", "OUT")
        not16.connect_output("OUT_11", "NOT_11", "OUT")
        not16.connect_output("OUT_12", "NOT_12", "OUT")
        not16.connect_output("OUT_13", "NOT_13", "OUT")
        not16.connect_output("OUT_14", "NOT_14", "OUT")
        not16.connect_output("OUT_15", "NOT_15", "OUT")
        not16.connect_output("OUT_16", "NOT_16", "OUT")

        self.library.add_circuit(not16)

    def add_and16(self):
        and16 = Circuit("AND16")

        and16.add_component("AND_01", self.library.get_circuit("AND"))
        and16.add_component("AND_02", self.library.get_circuit("AND"))
        and16.add_component("AND_03", self.library.get_circuit("AND"))
        and16.add_component("AND_04", self.library.get_circuit("AND"))
        and16.add_component("AND_05", self.library.get_circuit("AND"))
        and16.add_component("AND_06", self.library.get_circuit("AND"))
        and16.add_component("AND_07", self.library.get_circuit("AND"))
        and16.add_component("AND_08", self.library.get_circuit("AND"))
        and16.add_component("AND_09", self.library.get_circuit("AND"))
        and16.add_component("AND_10", self.library.get_circuit("AND"))
        and16.add_component("AND_11", self.library.get_circuit("AND"))
        and16.add_component("AND_12", self.library.get_circuit("AND"))
        and16.add_component("AND_13", self.library.get_circuit("AND"))
        and16.add_component("AND_14", self.library.get_circuit("AND"))
        and16.add_component("AND_15", self.library.get_circuit("AND"))
        and16.add_component("AND_16", self.library.get_circuit("AND"))

        and16.connect_input("A_01", "AND_01", "A")
        and16.connect_input("A_02", "AND_02", "A")
        and16.connect_input("A_03", "AND_03", "A")
        and16.connect_input("A_04", "AND_04", "A")
        and16.connect_input("A_05", "AND_05", "A")
        and16.connect_input("A_06", "AND_06", "A")
        and16.connect_input("A_07", "AND_07", "A")
        and16.connect_input("A_08", "AND_08", "A")
        and16.connect_input("A_09", "AND_09", "A")
        and16.connect_input("A_10", "AND_10", "A")
        and16.connect_input("A_11", "AND_11", "A")
        and16.connect_input("A_12", "AND_12", "A")
        and16.connect_input("A_13", "AND_13", "A")
        and16.connect_input("A_14", "AND_14", "A")
        and16.connect_input("A_15", "AND_15", "A")
        and16.connect_input("A_16", "AND_16", "A")
        and16.connect_input("B_01", "AND_01", "B")
        and16.connect_input("B_02", "AND_02", "B")
        and16.connect_input("B_03", "AND_03", "B")
        and16.connect_input("B_04", "AND_04", "B")
        and16.connect_input("B_05", "AND_05", "B")
        and16.connect_input("B_06", "AND_06", "B")
        and16.connect_input("B_07", "AND_07", "B")
        and16.connect_input("B_08", "AND_08", "B")
        and16.connect_input("B_09", "AND_09", "B")
        and16.connect_input("B_10", "AND_10", "B")
        and16.connect_input("B_11", "AND_11", "B")
        and16.connect_input("B_12", "AND_12", "B")
        and16.connect_input("B_13", "AND_13", "B")
        and16.connect_input("B_14", "AND_14", "B")
        and16.connect_input("B_15", "AND_15", "B")
        and16.connect_input("B_16", "AND_16", "B")

        and16.connect_output("OUT_01", "AND_01", "OUT")
        and16.connect_output("OUT_02", "AND_02", "OUT")
        and16.connect_output("OUT_03", "AND_03", "OUT")
        and16.connect_output("OUT_04", "AND_04", "OUT")
        and16.connect_output("OUT_05", "AND_05", "OUT")
        and16.connect_output("OUT_06", "AND_06", "OUT")
        and16.connect_output("OUT_07", "AND_07", "OUT")
        and16.connect_output("OUT_08", "AND_08", "OUT")
        and16.connect_output("OUT_09", "AND_09", "OUT")
        and16.connect_output("OUT_10", "AND_10", "OUT")
        and16.connect_output("OUT_11", "AND_11", "OUT")
        and16.connect_output("OUT_12", "AND_12", "OUT")
        and16.connect_output("OUT_13", "AND_13", "OUT")
        and16.connect_output("OUT_14", "AND_14", "OUT")
        and16.connect_output("OUT_15", "AND_15", "OUT")
        and16.connect_output("OUT_16", "AND_16", "OUT")

        self.library.add_circuit(and16)

    def add_or16(self):
        or16 = Circuit("OR16")

        or16.add_component("OR_01", self.library.get_circuit("OR"))
        or16.add_component("OR_02", self.library.get_circuit("OR"))
        or16.add_component("OR_03", self.library.get_circuit("OR"))
        or16.add_component("OR_04", self.library.get_circuit("OR"))
        or16.add_component("OR_05", self.library.get_circuit("OR"))
        or16.add_component("OR_06", self.library.get_circuit("OR"))
        or16.add_component("OR_07", self.library.get_circuit("OR"))
        or16.add_component("OR_08", self.library.get_circuit("OR"))
        or16.add_component("OR_09", self.library.get_circuit("OR"))
        or16.add_component("OR_10", self.library.get_circuit("OR"))
        or16.add_component("OR_11", self.library.get_circuit("OR"))
        or16.add_component("OR_12", self.library.get_circuit("OR"))
        or16.add_component("OR_13", self.library.get_circuit("OR"))
        or16.add_component("OR_14", self.library.get_circuit("OR"))
        or16.add_component("OR_15", self.library.get_circuit("OR"))
        or16.add_component("OR_16", self.library.get_circuit("OR"))

        or16.connect_input("A_01", "OR_01", "A")
        or16.connect_input("A_02", "OR_02", "A")
        or16.connect_input("A_03", "OR_03", "A")
        or16.connect_input("A_04", "OR_04", "A")
        or16.connect_input("A_05", "OR_05", "A")
        or16.connect_input("A_06", "OR_06", "A")
        or16.connect_input("A_07", "OR_07", "A")
        or16.connect_input("A_08", "OR_08", "A")
        or16.connect_input("A_09", "OR_09", "A")
        or16.connect_input("A_10", "OR_10", "A")
        or16.connect_input("A_11", "OR_11", "A")
        or16.connect_input("A_12", "OR_12", "A")
        or16.connect_input("A_13", "OR_13", "A")
        or16.connect_input("A_14", "OR_14", "A")
        or16.connect_input("A_15", "OR_15", "A")
        or16.connect_input("A_16", "OR_16", "A")
        or16.connect_input("B_01", "OR_01", "B")
        or16.connect_input("B_02", "OR_02", "B")
        or16.connect_input("B_03", "OR_03", "B")
        or16.connect_input("B_04", "OR_04", "B")
        or16.connect_input("B_05", "OR_05", "B")
        or16.connect_input("B_06", "OR_06", "B")
        or16.connect_input("B_07", "OR_07", "B")
        or16.connect_input("B_08", "OR_08", "B")
        or16.connect_input("B_09", "OR_09", "B")
        or16.connect_input("B_10", "OR_10", "B")
        or16.connect_input("B_11", "OR_11", "B")
        or16.connect_input("B_12", "OR_12", "B")
        or16.connect_input("B_13", "OR_13", "B")
        or16.connect_input("B_14", "OR_14", "B")
        or16.connect_input("B_15", "OR_15", "B")
        or16.connect_input("B_16", "OR_16", "B")

        or16.connect_output("OUT_01", "OR_01", "OUT")
        or16.connect_output("OUT_02", "OR_02", "OUT")
        or16.connect_output("OUT_03", "OR_03", "OUT")
        or16.connect_output("OUT_04", "OR_04", "OUT")
        or16.connect_output("OUT_05", "OR_05", "OUT")
        or16.connect_output("OUT_06", "OR_06", "OUT")
        or16.connect_output("OUT_07", "OR_07", "OUT")
        or16.connect_output("OUT_08", "OR_08", "OUT")
        or16.connect_output("OUT_09", "OR_09", "OUT")
        or16.connect_output("OUT_10", "OR_10", "OUT")
        or16.connect_output("OUT_11", "OR_11", "OUT")
        or16.connect_output("OUT_12", "OR_12", "OUT")
        or16.connect_output("OUT_13", "OR_13", "OUT")
        or16.connect_output("OUT_14", "OR_14", "OUT")
        or16.connect_output("OUT_15", "OR_15", "OUT")
        or16.connect_output("OUT_16", "OR_16", "OUT")

        self.library.add_circuit(or16)

    def add_mux16(self):
        mux16 = Circuit("Mux16")

        mux16.add_component("Mux_01", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_02", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_03", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_04", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_05", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_06", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_07", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_08", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_09", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_10", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_11", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_12", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_13", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_14", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_15", self.library.get_circuit("Mux"))
        mux16.add_component("Mux_16", self.library.get_circuit("Mux"))

        mux16.connect_input("A_01", "Mux_01", "A")
        mux16.connect_input("A_02", "Mux_02", "A")
        mux16.connect_input("A_03", "Mux_03", "A")
        mux16.connect_input("A_04", "Mux_04", "A")
        mux16.connect_input("A_05", "Mux_05", "A")
        mux16.connect_input("A_06", "Mux_06", "A")
        mux16.connect_input("A_07", "Mux_07", "A")
        mux16.connect_input("A_08", "Mux_08", "A")
        mux16.connect_input("A_09", "Mux_09", "A")
        mux16.connect_input("A_10", "Mux_10", "A")
        mux16.connect_input("A_11", "Mux_11", "A")
        mux16.connect_input("A_12", "Mux_12", "A")
        mux16.connect_input("A_13", "Mux_13", "A")
        mux16.connect_input("A_14", "Mux_14", "A")
        mux16.connect_input("A_15", "Mux_15", "A")
        mux16.connect_input("A_16", "Mux_16", "A")
        mux16.connect_input("B_01", "Mux_01", "B")
        mux16.connect_input("B_02", "Mux_02", "B")
        mux16.connect_input("B_03", "Mux_03", "B")
        mux16.connect_input("B_04", "Mux_04", "B")
        mux16.connect_input("B_05", "Mux_05", "B")
        mux16.connect_input("B_06", "Mux_06", "B")
        mux16.connect_input("B_07", "Mux_07", "B")
        mux16.connect_input("B_08", "Mux_08", "B")
        mux16.connect_input("B_09", "Mux_09", "B")
        mux16.connect_input("B_10", "Mux_10", "B")
        mux16.connect_input("B_11", "Mux_11", "B")
        mux16.connect_input("B_12", "Mux_12", "B")
        mux16.connect_input("B_13", "Mux_13", "B")
        mux16.connect_input("B_14", "Mux_14", "B")
        mux16.connect_input("B_15", "Mux_15", "B")
        mux16.connect_input("B_16", "Mux_16", "B")
        mux16.connect_input("SEL", "Mux_01", "SEL")
        mux16.connect_input("SEL", "Mux_02", "SEL")
        mux16.connect_input("SEL", "Mux_03", "SEL")
        mux16.connect_input("SEL", "Mux_04", "SEL")
        mux16.connect_input("SEL", "Mux_05", "SEL")
        mux16.connect_input("SEL", "Mux_06", "SEL")
        mux16.connect_input("SEL", "Mux_07", "SEL")
        mux16.connect_input("SEL", "Mux_08", "SEL")
        mux16.connect_input("SEL", "Mux_09", "SEL")
        mux16.connect_input("SEL", "Mux_10", "SEL")
        mux16.connect_input("SEL", "Mux_11", "SEL")
        mux16.connect_input("SEL", "Mux_12", "SEL")
        mux16.connect_input("SEL", "Mux_13", "SEL")
        mux16.connect_input("SEL", "Mux_14", "SEL")
        mux16.connect_input("SEL", "Mux_15", "SEL")
        mux16.connect_input("SEL", "Mux_16", "SEL")

        mux16.connect_output("OUT_01", "Mux_01", "OUT")
        mux16.connect_output("OUT_02", "Mux_02", "OUT")
        mux16.connect_output("OUT_03", "Mux_03", "OUT")
        mux16.connect_output("OUT_04", "Mux_04", "OUT")
        mux16.connect_output("OUT_05", "Mux_05", "OUT")
        mux16.connect_output("OUT_06", "Mux_06", "OUT")
        mux16.connect_output("OUT_07", "Mux_07", "OUT")
        mux16.connect_output("OUT_08", "Mux_08", "OUT")
        mux16.connect_output("OUT_09", "Mux_09", "OUT")
        mux16.connect_output("OUT_10", "Mux_10", "OUT")
        mux16.connect_output("OUT_11", "Mux_11", "OUT")
        mux16.connect_output("OUT_12", "Mux_12", "OUT")
        mux16.connect_output("OUT_13", "Mux_13", "OUT")
        mux16.connect_output("OUT_14", "Mux_14", "OUT")
        mux16.connect_output("OUT_15", "Mux_15", "OUT")
        mux16.connect_output("OUT_16", "Mux_16", "OUT")

        self.library.add_circuit(mux16)

    def add_or8way(self):
        or8way = Circuit("OR8Way")

        or8way.add_component("OR_1", self.library.get_circuit("OR"))
        or8way.add_component("OR_2", self.library.get_circuit("OR"))
        or8way.add_component("OR_3", self.library.get_circuit("OR"))
        or8way.add_component("OR_4", self.library.get_circuit("OR"))
        or8way.add_component("OR_5", self.library.get_circuit("OR"))
        or8way.add_component("OR_6", self.library.get_circuit("OR"))
        or8way.add_component("OR_7", self.library.get_circuit("OR"))

        or8way.connect_input("IN_1", "OR_1", "A")
        or8way.connect_input("IN_2", "OR_1", "B")
        or8way.connect_input("IN_3", "OR_2", "A")
        or8way.connect_input("IN_4", "OR_2", "B")
        or8way.connect_input("IN_5", "OR_3", "A")
        or8way.connect_input("IN_6", "OR_3", "B")
        or8way.connect_input("IN_7", "OR_4", "A")
        or8way.connect_input("IN_8", "OR_4", "B")

        or8way.connect_output("OUT", "OR_7", "OUT")

        or8way.connect("OR_1", "OUT", "OR_5", "A")
        or8way.connect("OR_2", "OUT", "OR_5", "B")
        or8way.connect("OR_3", "OUT", "OR_6", "A")
        or8way.connect("OR_4", "OUT", "OR_6", "B")
        or8way.connect("OR_5", "OUT", "OR_7", "A")
        or8way.connect("OR_6", "OUT", "OR_7", "B")

        self.library.add_circuit(or8way)

    def add_mux8way16(self):
        mux4way16 = Circuit("Mux4Way16")

        mux4way16.add_component("Mux16_AB", self.library.get_circuit("Mux16"))
        mux4way16.add_component("Mux16_CD", self.library.get_circuit("Mux16"))
        mux4way16.add_component("Mux16_OUT", self.library.get_circuit("Mux16"))

        mux4way16.connect_input("A_01", "Mux16_AB", "A_01")
        mux4way16.connect_input("A_02", "Mux16_AB", "A_02")
        mux4way16.connect_input("A_03", "Mux16_AB", "A_03")
        mux4way16.connect_input("A_04", "Mux16_AB", "A_04")
        mux4way16.connect_input("A_05", "Mux16_AB", "A_05")
        mux4way16.connect_input("A_06", "Mux16_AB", "A_06")
        mux4way16.connect_input("A_07", "Mux16_AB", "A_07")
        mux4way16.connect_input("A_08", "Mux16_AB", "A_08")
        mux4way16.connect_input("A_09", "Mux16_AB", "A_09")
        mux4way16.connect_input("A_10", "Mux16_AB", "A_10")
        mux4way16.connect_input("A_11", "Mux16_AB", "A_11")
        mux4way16.connect_input("A_12", "Mux16_AB", "A_12")
        mux4way16.connect_input("A_13", "Mux16_AB", "A_13")
        mux4way16.connect_input("A_14", "Mux16_AB", "A_14")
        mux4way16.connect_input("A_15", "Mux16_AB", "A_15")
        mux4way16.connect_input("A_16", "Mux16_AB", "A_16")
        mux4way16.connect_input("B_01", "Mux16_AB", "B_01")
        mux4way16.connect_input("B_02", "Mux16_AB", "B_02")
        mux4way16.connect_input("B_03", "Mux16_AB", "B_03")
        mux4way16.connect_input("B_04", "Mux16_AB", "B_04")
        mux4way16.connect_input("B_05", "Mux16_AB", "B_05")
        mux4way16.connect_input("B_06", "Mux16_AB", "B_06")
        mux4way16.connect_input("B_07", "Mux16_AB", "B_07")
        mux4way16.connect_input("B_08", "Mux16_AB", "B_08")
        mux4way16.connect_input("B_09", "Mux16_AB", "B_09")
        mux4way16.connect_input("B_10", "Mux16_AB", "B_10")
        mux4way16.connect_input("B_11", "Mux16_AB", "B_11")
        mux4way16.connect_input("B_12", "Mux16_AB", "B_12")
        mux4way16.connect_input("B_13", "Mux16_AB", "B_13")
        mux4way16.connect_input("B_14", "Mux16_AB", "B_14")
        mux4way16.connect_input("B_15", "Mux16_AB", "B_15")
        mux4way16.connect_input("B_16", "Mux16_AB", "B_16")
        mux4way16.connect_input("C_01", "Mux16_CD", "A_01")
        mux4way16.connect_input("C_02", "Mux16_CD", "A_02")
        mux4way16.connect_input("C_03", "Mux16_CD", "A_03")
        mux4way16.connect_input("C_04", "Mux16_CD", "A_04")
        mux4way16.connect_input("C_05", "Mux16_CD", "A_05")
        mux4way16.connect_input("C_06", "Mux16_CD", "A_06")
        mux4way16.connect_input("C_07", "Mux16_CD", "A_07")
        mux4way16.connect_input("C_08", "Mux16_CD", "A_08")
        mux4way16.connect_input("C_09", "Mux16_CD", "A_09")
        mux4way16.connect_input("C_10", "Mux16_CD", "A_10")
        mux4way16.connect_input("C_11", "Mux16_CD", "A_11")
        mux4way16.connect_input("C_12", "Mux16_CD", "A_12")
        mux4way16.connect_input("C_13", "Mux16_CD", "A_13")
        mux4way16.connect_input("C_14", "Mux16_CD", "A_14")
        mux4way16.connect_input("C_15", "Mux16_CD", "A_15")
        mux4way16.connect_input("C_16", "Mux16_CD", "A_16")
        mux4way16.connect_input("D_01", "Mux16_CD", "B_01")
        mux4way16.connect_input("D_02", "Mux16_CD", "B_02")
        mux4way16.connect_input("D_03", "Mux16_CD", "B_03")
        mux4way16.connect_input("D_04", "Mux16_CD", "B_04")
        mux4way16.connect_input("D_05", "Mux16_CD", "B_05")
        mux4way16.connect_input("D_06", "Mux16_CD", "B_06")
        mux4way16.connect_input("D_07", "Mux16_CD", "B_07")
        mux4way16.connect_input("D_08", "Mux16_CD", "B_08")
        mux4way16.connect_input("D_09", "Mux16_CD", "B_09")
        mux4way16.connect_input("D_10", "Mux16_CD", "B_10")
        mux4way16.connect_input("D_11", "Mux16_CD", "B_11")
        mux4way16.connect_input("D_12", "Mux16_CD", "B_12")
        mux4way16.connect_input("D_13", "Mux16_CD", "B_13")
        mux4way16.connect_input("D_14", "Mux16_CD", "B_14")
        mux4way16.connect_input("D_15", "Mux16_CD", "B_15")
        mux4way16.connect_input("D_16", "Mux16_CD", "B_16")
        mux4way16.connect_input("SEL_0", "Mux16_AB", "SEL")
        mux4way16.connect_input("SEL_0", "Mux16_CD", "SEL")
        mux4way16.connect_input("SEL_1", "Mux16_OUT", "SEL")

        mux4way16.connect_output("OUT_01", "Mux16_OUT", "OUT_01")
        mux4way16.connect_output("OUT_02", "Mux16_OUT", "OUT_02")
        mux4way16.connect_output("OUT_03", "Mux16_OUT", "OUT_03")
        mux4way16.connect_output("OUT_04", "Mux16_OUT", "OUT_04")
        mux4way16.connect_output("OUT_05", "Mux16_OUT", "OUT_05")
        mux4way16.connect_output("OUT_06", "Mux16_OUT", "OUT_06")
        mux4way16.connect_output("OUT_07", "Mux16_OUT", "OUT_07")
        mux4way16.connect_output("OUT_08", "Mux16_OUT", "OUT_08")
        mux4way16.connect_output("OUT_09", "Mux16_OUT", "OUT_09")
        mux4way16.connect_output("OUT_10", "Mux16_OUT", "OUT_10")
        mux4way16.connect_output("OUT_11", "Mux16_OUT", "OUT_11")
        mux4way16.connect_output("OUT_12", "Mux16_OUT", "OUT_12")
        mux4way16.connect_output("OUT_13", "Mux16_OUT", "OUT_13")
        mux4way16.connect_output("OUT_14", "Mux16_OUT", "OUT_14")
        mux4way16.connect_output("OUT_15", "Mux16_OUT", "OUT_15")
        mux4way16.connect_output("OUT_16", "Mux16_OUT", "OUT_16")

        mux4way16.connect("Mux16_AB", "OUT_01", "Mux16_OUT", "A_01")
        mux4way16.connect("Mux16_AB", "OUT_02", "Mux16_OUT", "A_02")
        mux4way16.connect("Mux16_AB", "OUT_03", "Mux16_OUT", "A_03")
        mux4way16.connect("Mux16_AB", "OUT_04", "Mux16_OUT", "A_04")
        mux4way16.connect("Mux16_AB", "OUT_05", "Mux16_OUT", "A_05")
        mux4way16.connect("Mux16_AB", "OUT_06", "Mux16_OUT", "A_06")
        mux4way16.connect("Mux16_AB", "OUT_07", "Mux16_OUT", "A_07")
        mux4way16.connect("Mux16_AB", "OUT_08", "Mux16_OUT", "A_08")
        mux4way16.connect("Mux16_AB", "OUT_09", "Mux16_OUT", "A_09")
        mux4way16.connect("Mux16_AB", "OUT_10", "Mux16_OUT", "A_10")
        mux4way16.connect("Mux16_AB", "OUT_11", "Mux16_OUT", "A_11")
        mux4way16.connect("Mux16_AB", "OUT_12", "Mux16_OUT", "A_12")
        mux4way16.connect("Mux16_AB", "OUT_13", "Mux16_OUT", "A_13")
        mux4way16.connect("Mux16_AB", "OUT_14", "Mux16_OUT", "A_14")
        mux4way16.connect("Mux16_AB", "OUT_15", "Mux16_OUT", "A_15")
        mux4way16.connect("Mux16_AB", "OUT_16", "Mux16_OUT", "A_16")
        mux4way16.connect("Mux16_CD", "OUT_01", "Mux16_OUT", "B_01")
        mux4way16.connect("Mux16_CD", "OUT_02", "Mux16_OUT", "B_02")
        mux4way16.connect("Mux16_CD", "OUT_03", "Mux16_OUT", "B_03")
        mux4way16.connect("Mux16_CD", "OUT_04", "Mux16_OUT", "B_04")
        mux4way16.connect("Mux16_CD", "OUT_05", "Mux16_OUT", "B_05")
        mux4way16.connect("Mux16_CD", "OUT_06", "Mux16_OUT", "B_06")
        mux4way16.connect("Mux16_CD", "OUT_07", "Mux16_OUT", "B_07")
        mux4way16.connect("Mux16_CD", "OUT_08", "Mux16_OUT", "B_08")
        mux4way16.connect("Mux16_CD", "OUT_09", "Mux16_OUT", "B_09")
        mux4way16.connect("Mux16_CD", "OUT_10", "Mux16_OUT", "B_10")
        mux4way16.connect("Mux16_CD", "OUT_11", "Mux16_OUT", "B_11")
        mux4way16.connect("Mux16_CD", "OUT_12", "Mux16_OUT", "B_12")
        mux4way16.connect("Mux16_CD", "OUT_13", "Mux16_OUT", "B_13")
        mux4way16.connect("Mux16_CD", "OUT_14", "Mux16_OUT", "B_14")
        mux4way16.connect("Mux16_CD", "OUT_15", "Mux16_OUT", "B_15")
        mux4way16.connect("Mux16_CD", "OUT_16", "Mux16_OUT", "B_16")

        self.library.add_circuit(mux4way16)
